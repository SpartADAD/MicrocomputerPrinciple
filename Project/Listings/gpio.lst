C51 COMPILER V9.59.0.0   GPIO                                                              11/17/2018 11:44:41 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE GPIO
OBJECT MODULE PLACED IN .\Objects\gpio.obj
COMPILER INVOKED BY: E:\Keil5\C51\BIN\C51.EXE USERS\HardWare\gpio.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\USERS\HardWa
                    -re;.\USERS) DEBUG OBJECTEXTEND PRINT(.\Listings\gpio.lst) TABS(2) OBJECT(.\Objects\gpio.obj)

line level    source

   1          /****************************gpio.c********************************/
   2          
   3          #include "gpio.h"
   4          #include "STC15F2K60S2.h"
   5          #include "math.h"
   6          #include "main.h"
   7          /**
   8            * @brief  GPIO口某位置位函数
   9            * @param  GPIOx 某一GPIO口  
  10            * @param  GPIO_Pin_x  某一GPIO口的某一位
  11            * @retval void
  12            */
  13          void GPIOx_SetBits(unsigned char GPIOx,unsigned char GPIO_Pin_x)
  14          {
  15   1        switch(GPIOx)
  16   1        {
  17   2          case GPIOP0:
  18   2            P0 |=(int)pow(2,GPIO_Pin_x);
  19   2          break;
  20   2          
  21   2          case GPIOP1:
  22   2            P1 |=(int)pow(2,GPIO_Pin_x);
  23   2          break;
  24   2          
  25   2          case GPIOP2:
  26   2            P2 |=(int)pow(2,GPIO_Pin_x);
  27   2          break;
  28   2          
  29   2          case GPIOP3:
  30   2            P3 |=(int)pow(2,GPIO_Pin_x);
  31   2          break;
  32   2          
  33   2          case GPIOP4:
  34   2            P4 |=(int)pow(2,GPIO_Pin_x);
  35   2          break;
  36   2          
  37   2          default:
  38   2            
  39   2          break;
  40   2        }
  41   1          
  42   1      }
  43          /**
  44            * @brief  GPIO口某位复位函数
  45            * @param  GPIOx 某一GPIO口  
  46            * @param  GPIO_Pin_x  某一GPIO口的某一位
  47            * @retval void
  48            */
  49          void GPIOx_ResetBits(unsigned char GPIOx,unsigned char GPIO_Pin_x)
  50          {
  51   1        switch(GPIOx)
  52   1        {
  53   2          case GPIOP0:
  54   2            P0 &=(~(int)pow(2,GPIO_Pin_x));
C51 COMPILER V9.59.0.0   GPIO                                                              11/17/2018 11:44:41 PAGE 2   

  55   2          break;
  56   2          
  57   2          case GPIOP1:
  58   2            P1 &=(~(int)pow(2,GPIO_Pin_x));
  59   2          break;
  60   2          
  61   2          case GPIOP2:
  62   2            P2 &=(~(int)pow(2,GPIO_Pin_x));
  63   2          break;
  64   2          
  65   2          case GPIOP3:
  66   2            P3 &=(~(int)pow(2,GPIO_Pin_x));
  67   2          break;
  68   2          
  69   2          case GPIOP4:
  70   2            P4 &=(~(int)pow(2,GPIO_Pin_x));
  71   2          break;
  72   2          
  73   2          default:
  74   2            
  75   2          break;
  76   2        }
  77   1      
  78   1      }
  79          /**
  80            * @brief  GPIO口某位读取当前状态函数
  81            * @param  GPIOx 某一GPIO口  
  82            * @param  GPIO_Pin_x  某一GPIO口的某一位
  83            * @retval 某一GPIO口当前GPIO的状态
  84            */
  85          unsigned char GPIOx_ReadBits(unsigned char GPIOx, unsigned char GPIO_Pin_x)
  86          {
  87   1        unsigned char returnStatus=0;
  88   1        unsigned char GPIO_Pin_x_BIN=(int)pow(2,GPIO_Pin_x);
  89   1        
  90   1        switch(GPIOx)
  91   1        {
  92   2          case GPIOP0:
  93   2            P0|=GPIO_Pin_x_BIN;
  94   2            returnStatus = P0 & GPIO_Pin_x_BIN;
  95   2          break;
  96   2          
  97   2          case GPIOP1:
  98   2            P1|=GPIO_Pin_x_BIN;
  99   2            returnStatus = P1 & GPIO_Pin_x_BIN;
 100   2          break;
 101   2          
 102   2          case GPIOP2:
 103   2            P2|=GPIO_Pin_x_BIN;
 104   2            returnStatus = P2 & GPIO_Pin_x_BIN;
 105   2          break;
 106   2          
 107   2          case GPIOP3:
 108   2            P3|=GPIO_Pin_x_BIN;
 109   2            returnStatus = P3 & GPIO_Pin_x_BIN;
 110   2          break;
 111   2          
 112   2          default:
 113   2          break;
 114   2        }
 115   1        
 116   1        return (returnStatus>>GPIO_Pin_x);
C51 COMPILER V9.59.0.0   GPIO                                                              11/17/2018 11:44:41 PAGE 3   

 117   1      }
 118          
 119          #define GET_BIT_NUMBER    4
 120          void KeyControl(void)
 121          {
 122   1        unsigned char HighFour=0;
 123   1        
 124   1        /*输入端置位操作*/
 125   1        P1|=0xf0;
 126   1        
 127   1        HighFour=(P1 & 0xf0); 
 128   1        P1= (~(HighFour>>4));
 129   1      
 130   1      }
 131          void ShowKeyValue(void)
 132          {
 133   1        unsigned char HighFour=0; 
 134   1        unsigned char codeMy=0;
 135   1        unsigned char i=0;
 136   1        
 137   1        P1|=0xf0;
 138   1        HighFour= ((P1 & 0xf0)>>4); 
 139   1        /*输入端置位操作*/
 140   1        
 141   1        for(i=0;i<4;i++)
 142   1        {
 143   2          codeMy+=((HighFour&((int)pow(2,i)))>>i)*(i+1);
 144   2        }
 145   1        GPIOx_SetBits(1,3);
 146   1      //  if(HighFour==0x08)
 147   1      //  {
 148   1      //    GPIOx_ResetBits(1,0);
 149   1      //    GPIOx_ResetBits(1,1);
 150   1      //  }
 151   1      //  else if(HighFour==0x04)
 152   1      //  {
 153   1      //    GPIOx_SetBits(1,0);
 154   1      //    GPIOx_ResetBits(1,1);
 155   1      //  }else if(HighFour==0x02)
 156   1      //  {
 157   1      //    GPIOx_ResetBits(1,0);
 158   1      //    GPIOx_SetBits(1,1);
 159   1      //  }else if (HighFour==0x01)
 160   1      //  {
 161   1      //    GPIOx_SetBits(1,0);
 162   1      //    GPIOx_SetBits(1,1);
 163   1      //  }else
 164   1      //  {
 165   1      //    GPIOx_SetBits(1,0);
 166   1      //    GPIOx_SetBits(1,1);
 167   1      //  }
 168   1        P1=~codeMy;
 169   1      
 170   1      }
 171          #define LED_NUMBER     8
 172          void WaterLight(void)
 173          {
 174   1        static uint32_t xdata runTime=0;
 175   1        static char xdata ledIndex=0;
 176   1        uint16_t xdata timeControl=200;
 177   1        
 178   1        runTime++;
C51 COMPILER V9.59.0.0   GPIO                                                              11/17/2018 11:44:41 PAGE 4   

 179   1        if(runTime<=timeControl)
 180   1        {
 181   2          GPIOx_ResetBits(GPIOP1,ledIndex);
 182   2        }
 183   1        else if(runTime>timeControl&&runTime<=timeControl*2)
 184   1        {
 185   2          GPIOx_SetBits(GPIOP1,ledIndex);
 186   2        }
 187   1        else if(runTime>timeControl*2)
 188   1        {
 189   2          runTime=0;
 190   2          if(gParam.flag)
 191   2          {
 192   3            ledIndex++;
 193   3            if(ledIndex>=LED_NUMBER)
 194   3              ledIndex=0;
 195   3          }
 196   2          else
 197   2          {
 198   3            ledIndex--;
 199   3            if(ledIndex<0)
 200   3              ledIndex=LED_NUMBER-1;
 201   3          }
 202   2        }
 203   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    813    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      3      10
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
