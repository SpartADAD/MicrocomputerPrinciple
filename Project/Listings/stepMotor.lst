C51 COMPILER V9.59.0.0   STEPMOTOR                                                         10/16/2018 22:59:30 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE STEPMOTOR
OBJECT MODULE PLACED IN .\Objects\stepMotor.obj
COMPILER INVOKED BY: E:\Keil5\C51\BIN\C51.EXE stepMotor.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\List
                    -ings\stepMotor.lst) TABS(2) OBJECT(.\Objects\stepMotor.obj)

line level    source

   1          #include "stepMotor.h"
   2          #include "delay.h"
   3          #include "8255.h"
   4          
   5          void StepMotorPinInit(void)
   6          {
   7   1        GPIOInit(PHASE_A_PORT, PHASE_A_PIN, GPIO_PUSHPULL);
   8   1        GPIOInit(PHASE_B_PORT, PHASE_B_PIN, GPIO_PUSHPULL);
   9   1        GPIOInit(PHASE_C_PORT, PHASE_C_PIN, GPIO_PUSHPULL);
  10   1        GPIOInit(PHASE_D_PORT, PHASE_D_PIN, GPIO_PUSHPULL); 
  11   1      }
  12          
  13          void StepMotorSpeedControl(float vel)
  14          {
  15   1        static unsigned char xdata state = 0x00;
  16   1        static unsigned long xdata counter = 0;
  17   1        
  18   1        switch(state)
  19   1        {
  20   2          case 0:
  21   2            IO8255SetBit(PortA , 0 , 1);
  22   2            IO8255SetBit(PortA , 1 , 0);
  23   2            IO8255SetBit(PortA , 2 , 0);
  24   2            IO8255SetBit(PortA , 3 , 0);    
  25   2      //      GPIOSetBit(PHASE_A_PORT, PHASE_A_PIN);
  26   2      //      GPIOResetBit(PHASE_B_PORT,PHASE_B_PIN);
  27   2      //      GPIOResetBit(PHASE_C_PORT,PHASE_C_PIN);
  28   2      //      GPIOResetBit(PHASE_D_PORT,PHASE_D_PIN);     
  29   2          break;
  30   2          case 1:
  31   2            IO8255SetBit(PortA , 0 , 1);
  32   2            IO8255SetBit(PortA , 1 , 1);
  33   2            IO8255SetBit(PortA , 2 , 0);
  34   2            IO8255SetBit(PortA , 3 , 0);  
  35   2      //      GPIOSetBit(PHASE_A_PORT, PHASE_A_PIN);
  36   2      //      GPIOSetBit(PHASE_B_PORT,PHASE_B_PIN);
  37   2      //      GPIOResetBit(PHASE_C_PORT,PHASE_C_PIN);
  38   2      //      GPIOResetBit(PHASE_D_PORT,PHASE_D_PIN);     
  39   2          break;
  40   2          case 2:
  41   2            IO8255SetBit(PortA , 0 , 0);
  42   2            IO8255SetBit(PortA , 1 , 1);
  43   2            IO8255SetBit(PortA , 2 , 0);
  44   2            IO8255SetBit(PortA , 3 , 0);  
  45   2      //      GPIOResetBit(PHASE_A_PORT, PHASE_A_PIN);
  46   2      //      GPIOSetBit(PHASE_B_PORT,PHASE_B_PIN);
  47   2      //      GPIOResetBit(PHASE_C_PORT,PHASE_C_PIN);
  48   2      //      GPIOResetBit(PHASE_D_PORT,PHASE_D_PIN);     
  49   2          break;
  50   2          case 3:
  51   2            IO8255SetBit(PortA , 0 , 0);
  52   2            IO8255SetBit(PortA , 1 , 1);
  53   2            IO8255SetBit(PortA , 2 , 1);
  54   2            IO8255SetBit(PortA , 3 , 0);
C51 COMPILER V9.59.0.0   STEPMOTOR                                                         10/16/2018 22:59:30 PAGE 2   

  55   2      //      GPIOResetBit(PHASE_A_PORT, PHASE_A_PIN);
  56   2      //      GPIOSetBit(PHASE_B_PORT,PHASE_B_PIN);
  57   2      //      GPIOSetBit(PHASE_C_PORT,PHASE_C_PIN);
  58   2      //      GPIOResetBit(PHASE_D_PORT,PHASE_D_PIN);     
  59   2          break;
  60   2          case 4:
  61   2            IO8255SetBit(PortA , 0 , 0);
  62   2            IO8255SetBit(PortA , 1 , 0);
  63   2            IO8255SetBit(PortA , 2 , 1);
  64   2            IO8255SetBit(PortA , 3 , 0);
  65   2      //      GPIOResetBit(PHASE_A_PORT, PHASE_A_PIN);
  66   2      //      GPIOResetBit(PHASE_B_PORT,PHASE_B_PIN);
  67   2      //      GPIOSetBit(PHASE_C_PORT,PHASE_C_PIN);
  68   2      //      GPIOResetBit(PHASE_D_PORT,PHASE_D_PIN);     
  69   2          break;
  70   2          case 5:
  71   2            IO8255SetBit(PortA , 0 , 0);
  72   2            IO8255SetBit(PortA , 1 , 0);
  73   2            IO8255SetBit(PortA , 2 , 1);
  74   2            IO8255SetBit(PortA , 3 , 1);
  75   2      //      GPIOResetBit(PHASE_A_PORT, PHASE_A_PIN);
  76   2      //      GPIOResetBit(PHASE_B_PORT,PHASE_B_PIN);
  77   2      //      GPIOSetBit(PHASE_C_PORT,PHASE_C_PIN);
  78   2      //      GPIOSetBit(PHASE_D_PORT,PHASE_D_PIN);
  79   2          break;
  80   2          case 6:
  81   2            IO8255SetBit(PortA , 0 , 0);
  82   2            IO8255SetBit(PortA , 1 , 0);
  83   2            IO8255SetBit(PortA , 2 , 0);
  84   2            IO8255SetBit(PortA , 3 , 1);
  85   2      //      GPIOResetBit(PHASE_A_PORT, PHASE_A_PIN);
  86   2      //      GPIOResetBit(PHASE_B_PORT,PHASE_B_PIN);
  87   2      //      GPIOResetBit(PHASE_C_PORT,PHASE_C_PIN);
  88   2      //      GPIOSetBit(PHASE_D_PORT,PHASE_D_PIN);
  89   2          break;
  90   2          case 7:
  91   2            IO8255SetBit(PortA , 0 , 1);
  92   2            IO8255SetBit(PortA , 1 , 0);
  93   2            IO8255SetBit(PortA , 2 , 0);
  94   2            IO8255SetBit(PortA , 3 , 1);
  95   2      //      GPIOSetBit(PHASE_A_PORT, PHASE_A_PIN);
  96   2      //      GPIOResetBit(PHASE_B_PORT,PHASE_B_PIN);
  97   2      //      GPIOResetBit(PHASE_C_PORT,PHASE_C_PIN);
  98   2      //      GPIOSetBit(PHASE_D_PORT,PHASE_D_PIN);
  99   2          break;
 100   2          default:
 101   2          break;
 102   2        }
 103   1        
 104   1        counter++;
 105   1        
 106   1        if(counter==((unsigned long)((STEP_RESOLUTION/(vel))*1000.0f)))
 107   1        {
 108   2          counter=0;
 109   2          if(vel>0)
 110   2          {
 111   3        //    DelayMs((int)((STEP_RESOLUTION/vel)*1000));
 112   3            state++;
 113   3            state%=8;
 114   3          }
 115   2          else if(vel<0)
 116   2          {
C51 COMPILER V9.59.0.0   STEPMOTOR                                                         10/16/2018 22:59:30 PAGE 3   

 117   3        //    DelayMs((int)((STEP_RESOLUTION/(-vel))*1000));
 118   3            if(state==0)
 119   3            {
 120   4              state=8;
 121   4            }
 122   3            state--;  
 123   3          }
 124   2        }
 125   1      }
 126          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    459    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5       4
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
