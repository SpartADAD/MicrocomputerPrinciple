C51 COMPILER V9.59.0.0   82C55                                                             12/27/2018 21:24:50 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE 82C55
OBJECT MODULE PLACED IN .\Objects\82C55.obj
COMPILER INVOKED BY: E:\Keil5\C51\BIN\C51.EXE USERS\HardWare\82C55.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\USERS\HardW
                    -are;.\USERS) DEBUG OBJECTEXTEND PRINT(.\Listings\82C55.lst) TABS(2) OBJECT(.\Objects\82C55.obj)

line level    source

   1          /****************************82C55.c***********************/
   2          #include "82C55.h"
   3          #include "delay.h"
   4          #include "stdio.h"
   5          #include "main.h"
   6          #include "HD7279.h"
   7          #include "string.h"
   8          
   9          uint8_t xdata P8255_CTL _at_ 0xf803;
  10          uint8_t xdata P8255_A _at_ 0xf800;
  11          uint8_t xdata P8255_B _at_ 0xf801;
  12          uint8_t xdata P8255_C _at_ 0xf802;
  13          
  14          
  15          /**
  16            * @brief  82C55初始化函数 A口作为输出B口作为输入 C口高位做输出 低位做输入
  17            * @param  void
  18            * @retval void
  19            */
  20          void MyC55_Init(void)
  21          {
  22   1        C55Init_t C55InitStucture={0};
  23   1        C55InitStucture.portAInit.workMode = IO8255_MODE0;
  24   1        C55InitStucture.portAInit.inOrOut =  IO8255_OUTPUT;
  25   1        
  26   1        C55InitStucture.portBInit.workMode = IO8255_MODE0;
  27   1        C55InitStucture.portBInit.inOrOut =  IO8255_INPUT;
  28   1        
  29   1        C55InitStucture.portCHInit.inOrOut = IO8255_OUTPUT;
  30   1        C55InitStucture.portCLInit.inOrOut = IO8255_INPUT;
  31   1      
  32   1        C55_Init(C55InitStucture);
  33   1      
  34   1      }
  35          /**
  36            * @brief  82C55初始化函数
  37            * @param  C55InitStuct 初始化结构体 通过传递结构体对控制字进行赋值
  38            * @retval void
  39            */
  40          void C55_Init(C55Init_t C55InitStuct)
  41          {
  42   1        uint8_t xdata initCode = 0x80;
  43   1        
  44   1        //根据输入状态配置控制字并发送
  45   1        initCode|=(C55InitStuct.portAInit.workMode<<5);
  46   1        initCode|=(C55InitStuct.portAInit.inOrOut<<4);
  47   1        
  48   1        initCode|=(C55InitStuct.portBInit.workMode<<2);
  49   1        initCode|=(C55InitStuct.portBInit.inOrOut<<1);
  50   1        
  51   1        initCode|=(C55InitStuct.portCHInit.inOrOut<<3);
  52   1        initCode|=(C55InitStuct.portCLInit.inOrOut);
  53   1        
  54   1        P8255_CTL = initCode;
C51 COMPILER V9.59.0.0   82C55                                                             12/27/2018 21:24:50 PAGE 2   

  55   1      } 
  56          
  57          
  58          /**
  59            * @brief  82C55某个端口发数函数 相当于改变端口状态
  60            * @param  Port 82C55某一个端口
  61            * @param  dataSend 要发送的字节
  62            * @retval void
  63            */
  64          void C55_SendByte(uint8_t Port,uint8_t dataSend)
  65          {
  66   1        switch(Port)
  67   1        {
  68   2          case PORT_A:
  69   2            P8255_A = dataSend;
  70   2          break;
  71   2          
  72   2          case PORT_B:
  73   2            P8255_B = dataSend;
  74   2          break;
  75   2          
  76   2          case PORT_C:
  77   2            P8255_C = dataSend;
  78   2          break;
  79   2          
  80   2          default:
  81   2          break;
  82   2        }
  83   1      }
  84          /**
  85            * @brief  82C55某个端口接受函数 得到当前端口8位的数据大小
  86            * @param  Port 82C55某一个端口
  87            * @retval dataReceive 读取端口当前的电平值得到8位返回值
  88            */
  89          uint8_t C55_ReceiveByte(uint8_t Port)
  90          {
  91   1        uint8_t xdata dataReceive= 0;
  92   1        switch(Port)
  93   1        {
  94   2          case PORT_A:
  95   2            dataReceive = P8255_A;
  96   2          break;
  97   2          
  98   2          case PORT_B:
  99   2            dataReceive = P8255_B;
 100   2          break;
 101   2          
 102   2          case PORT_C:
 103   2            dataReceive = P8255_C;
 104   2          break;
 105   2          
 106   2          default:
 107   2          break;
 108   2        }
 109   1        
 110   1        return dataReceive;
 111   1      }
 112            
 113          /**
 114            * @brief  82C55 PORT口某位置位函数
 115            * @param  PORTx 某一GPIO口  
 116            * @param  PORT_Pin_x  某一GPIO口的某一位
C51 COMPILER V9.59.0.0   82C55                                                             12/27/2018 21:24:50 PAGE 3   

 117            * @retval void
 118            */
 119          void PORTx_SetBits(unsigned char PORTx,unsigned char PORT_Pin_x)
 120          {
 121   1        uint8_t xdata portA = P8255_A;
 122   1        uint8_t xdata portB = P8255_B;
 123   1        uint8_t xdata portC = 0;
 124   1        switch(PORTx)
 125   1        {
 126   2          case PORT_A:
 127   2            portA |=(int)pow(2,PORT_Pin_x);
 128   2            P8255_A = portA;
 129   2          break;
 130   2          
 131   2          case PORT_B:
 132   2            portB |=(int)pow(2,PORT_Pin_x);
 133   2            P8255_B = portB;
 134   2          break;
 135   2          
 136   2          case PORT_C:
 137   2            portC = (PORT_Pin_x<<1)|0x01;
 138   2            P8255_CTL = portC;
 139   2          break;
 140   2          
 141   2          
 142   2          default:
 143   2            
 144   2          break;
 145   2        }
 146   1          
 147   1      }
 148          /**
 149            * @brief  82C55 PORT口某位复位函数
 150            * @param  PORTx 某一GPIO口  
 151            * @param  PORT_Pin_x  某一GPIO口的某一位
 152            * @retval void
 153            */
 154          void PORTx_ResetBits(unsigned char PORTx,unsigned char PORT_Pin_x)
 155          {
 156   1        uint8_t xdata portA = P8255_A;
 157   1        uint8_t xdata portB = P8255_B;
 158   1        uint8_t xdata portC = 0;
 159   1        switch(PORTx)
 160   1        {
 161   2          case PORT_A:
 162   2            portA &=(~(int)pow(2,PORT_Pin_x));
 163   2            P8255_A =portA;
 164   2          break;
 165   2          
 166   2          case PORT_B:
 167   2            portB &=(~(int)pow(2,PORT_Pin_x));
 168   2            P8255_B = portB;
 169   2          break;
 170   2          
 171   2          case PORT_C:
 172   2            portC = (PORT_Pin_x<<1)&0xfe;
 173   2            P8255_CTL = portC;
 174   2          break;
 175   2          
 176   2          default:
 177   2          break;
 178   2        }
C51 COMPILER V9.59.0.0   82C55                                                             12/27/2018 21:24:50 PAGE 4   

 179   1      }
 180          
 181          /**
 182            * @brief  PORT口某位读取当前状态函数
 183            * @param  PORTx 某一PORT口  
 184            * @param  PORT_Pin_x  某一PORT口的某一位
 185            * @retval 某一PORT口某一位当前的状态
 186            */
 187          
 188          uint8_t PORTx_ReadBits(uint8_t PORTx, unsigned char Port_Pin_x)
 189          {
 190   1        uint8_t xdata portA = P8255_A;
 191   1        uint8_t xdata portB = P8255_B;
 192   1        uint8_t xdata portC = P8255_C;
 193   1        unsigned char returnStatus=0;
 194   1        unsigned char Port_Pin_x_BIN=(int)pow(2,Port_Pin_x);
 195   1        
 196   1        switch(PORTx)
 197   1        {
 198   2          case PORT_A:
 199   2            returnStatus = portA & Port_Pin_x_BIN;
 200   2          break;
 201   2          
 202   2          case PORT_B:
 203   2            returnStatus = portB & Port_Pin_x_BIN;
 204   2          break;
 205   2          
 206   2          case PORT_C:
 207   2            returnStatus = portC & Port_Pin_x_BIN;
 208   2          break;
 209   2          
 210   2          
 211   2          default:
 212   2          break;
 213   2        }
 214   1        
 215   1        return (returnStatus>>Port_Pin_x);
 216   1      }
 217          /**
 218            * @brief  读取82C55（A口作为输入B口作为输出）通过开关控制led亮灭
 219            * @param  void
 220            * @retval void
 221            */
 222          void KeyReadBy82C55(void)
 223          {
 224   1        uint8_t keyStatus =0;
 225   1        
 226   1        keyStatus = P8255_A;
 227   1      
 228   1        P8255_B=~keyStatus;
 229   1      
 230   1      }
 231          /*定义发送的字节大小*/
 232          #define DATA_LENGTH   20
 233          /*定义发送的字节大小*/
 234          static int xdata receiveFromB[DATA_LENGTH]={0};
 235          /**
 236            * @brief  甲箱发数函数
 237            * @param  void
 238            * @retval void
 239            */
 240          void AToB(void)
C51 COMPILER V9.59.0.0   82C55                                                             12/27/2018 21:24:50 PAGE 5   

 241          {
 242   1        uint8_t xdata i=0;
 243   1        uint8_t sendArray[DATA_LENGTH]={1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20};
 244   1      
 245   1        for(i=0;i<DATA_LENGTH;i++)
 246   1        {
 247   2          STB_SET;
 248   2          C55_SendByte(PORT_A,sendArray[i]);
 249   2          receiveFromB[i]=C55_ReceiveByte(PORT_B);
 250   2          STB_RESET;
 251   2          while(BUSY_STATUS);
 252   2        }
 253   1      }
 254          /*从A端口接受的数组*/
 255          static int xdata receiveFromA[DATA_LENGTH]={0};
 256          /**
 257            * @brief  乙箱接受函数
 258            * @param  void
 259            * @retval void
 260            */
 261          void BReceiveSort(void)
 262          {
 263   1        static uint8_t xdata i=0;
 264   1        static int xdata dataSort[DATA_LENGTH]={0};
 265   1        
 266   1        while(STB_STATUS);
 267   1        BUSY_SET;
 268   1        receiveFromA[i]=C55_ReceiveByte(PORT_B);
 269   1        dataSort[i]=receiveFromA[i];
 270   1        i++;
 271   1        
 272   1        if(i>=20)
 273   1        {
 274   2          /*开始排序*/
 275   2          MaoPaoSort(DATA_LENGTH,dataSort);
 276   2          /*排序结束*/
 277   2          for(i=0;i<DATA_LENGTH;i++)
 278   2          {
 279   3            HD7279ShowInt(receiveFromA[i]);
 280   3            DelayMs(1000);
 281   3          }
 282   2          i=0;
 283   2        }
 284   1        DelayMs(200);
 285   1        BUSY_RESET;
 286   1      
 287   1      }
 288          /**
 289            * @brief  发送或者接受 通过预编译宏下载到不同箱子上
 290            * @param  void
 291            * @retval void
 292            */
 293          void SendOrReceive(void)
 294          {
 295   1        #if  ROLE ==     1
                  AToB();
                #elif ROLE ==     2
 298   1          BReceiveSort();
 299   1        #endif
 300   1      }
 301          /**
 302            * @brief  冒泡排序法 从左到右由大到小
C51 COMPILER V9.59.0.0   82C55                                                             12/27/2018 21:24:50 PAGE 6   

 303            * @param  dataLength 排血数组长度
 304            * @param  dataSorted 要排序的数组
 305            * @retval void
 306            */
 307          void MaoPaoSort(uint32_t dataLength,int *dataSorted)
 308          {
 309   1        //比较的轮数
 310   1        uint32_t xdata i=0;  
 311   1         //每轮比较的次数
 312   1        uint32_t xdata j=0;
 313   1        int temp=0;
 314   1        for (i=0; i<dataLength-1; ++i)  //比较n-1轮
 315   1        {
 316   2            for (j=0; j<dataLength-1-i; ++j)  //每轮比较n-1-i次,
 317   2            {
 318   3                if (dataSorted[j] < dataSorted[j+1])
 319   3                {
 320   4                    temp = dataSorted[j];
 321   4                    dataSorted[j] = dataSorted[j+1];
 322   4                    dataSorted[j+1] = temp;
 323   4                }
 324   3            }
 325   2        }
 326   1      
 327   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1234    ----
   CONSTANT SIZE    =     28    ----
   XDATA SIZE       =    121      59
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
