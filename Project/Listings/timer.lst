C51 COMPILER V9.59.0.0   TIMER                                                             10/16/2018 22:59:29 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE TIMER
OBJECT MODULE PLACED IN .\Objects\timer.obj
COMPILER INVOKED BY: E:\Keil5\C51\BIN\C51.EXE timer.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings
                    -\timer.lst) TABS(2) OBJECT(.\Objects\timer.obj)

line level    source

   1          /*************************timer.c******************************/
   2          
   3          #include "timer.h"
   4          #include "HD7279.h"
   5          
   6          //定时器使能和失能函数，输入变量为定时器编号和使能失能命令
   7          void TimerCmd(TimerTypeDef_t TIMx , FunctionalState_t newState)
   8          {
   9   1        //根据输入的定时器和命令对TCON寄存器进行配置
  10   1        if(newState == enable)
  11   1        {
  12   2          TCON|=(0x10<<(TIMx * 2));
  13   2        }
  14   1        else 
  15   1        {
  16   2          TCON&=(~(0x10<<(TIMx * 2)));
  17   2        }
  18   1        
  19   1      }
  20          
  21          //读取定时器溢出中断标志位，输入变量为定时器编号
  22          unsigned char TimerGetOverFlowITFlag(TimerTypeDef_t TIMx)
  23          {
  24   1        unsigned char xdata tempItFlag = 0;
  25   1        //根据输入的定时器读取对应的寄存器
  26   1        if(TIMx==TIM0)
  27   1        {
  28   2          tempItFlag = TF0;
  29   2        }
  30   1        else if(TIMx==TIM1)
  31   1        {
  32   2          tempItFlag = TF1;
  33   2        }
  34   1        return tempItFlag;
  35   1      }
  36          
  37          //清除定时器溢出中断标志位，输入变量为定时器编号
  38          void TimerClearOverFlowFlag(TimerTypeDef_t TIMx)
  39          {
  40   1        //根据输入的定时器编号清除对应寄存器
  41   1        if(TIMx==TIM0)
  42   1        {
  43   2          TF0 = 0;
  44   2        }
  45   1        else if(TIMx==TIM1)
  46   1        {
  47   2          TF1 = 0;
  48   2        }
  49   1      }
  50          
  51          //对定时器模式进行初始化
  52          void TimeModeInit(TimerTypeDef_t TIMx , timeMode_t timeMode)
  53          {
  54   1        unsigned char xdata tempCrl = 0;
C51 COMPILER V9.59.0.0   TIMER                                                             10/16/2018 22:59:29 PAGE 2   

  55   1        
  56   1        //根据输入的模式配置TMOD寄存器
  57   1        
  58   1        tempCrl|=(timeMode.timerMode<<(TIMx * 4));
  59   1        
  60   1        tempCrl|=((timeMode.timeWorkMode<<2)<<(TIMx * 4));
  61   1        
  62   1        tempCrl|=((timeMode.isGateCrl<<3)<<(TIMx * 4));
  63   1        
  64   1        TMOD=tempCrl|(TMOD&(0xf0>>(TIMx * 4)));
  65   1      }
  66          
  67          //对定时器重装载值进行初始化
  68          void TimeReloadNumInit(TimerTypeDef_t TIMx,timerMode_t timerMode,unsigned long timerPeriod, unsigned int m
             -echinePeriod)
  69          {
  70   1        unsigned int xdata bitNum = 0;
  71   1        unsigned int xdata reloadNum = 0;
  72   1        
  73   1        //根据不同的模式选择最大重装载值 
  74   1        if(timerMode<=1)
  75   1        {
  76   2          bitNum = 65535;
  77   2        }
  78   1        else
  79   1        {
  80   2          bitNum = 255;
  81   2        }
  82   1        
  83   1        //根据实际配置的周期以及机器周期计算实际的重装载值
  84   1        reloadNum = bitNum - timerPeriod/mechinePeriod;
  85   1      
  86   1        
  87   1        //根据所选择的定时器配置相应的寄存器
  88   1        if(TIMx == TIM0)
  89   1        {
  90   2          TL0 = reloadNum&0x00ff;
  91   2          TH0 = reloadNum>>8;
  92   2        }
  93   1        else if(TIMx == TIM1)
  94   1        {
  95   2          TL1 = reloadNum&0x00ff;
  96   2          TH1 = reloadNum>>8;
  97   2        }
  98   1        
  99   1      }
 100          
 101          //定时器初始化函数
 102          void TimeInit(TimerTypeDef_t TIMx , timeMode_t timeMode ,unsigned long timerPeriod, unsigned int mechinePe
             -riod)
 103          {
 104   1        
 105   1        //配置定时器工作模式
 106   1        TimeModeInit(TIMx , timeMode);
 107   1        
 108   1        //配置定时器重装载值
 109   1        TimeReloadNumInit(TIMx,timeMode.timerMode,timerPeriod,mechinePeriod);
 110   1        if(timeMode.timeWorkMode==counter)
 111   1        {
 112   2          if(TIMx == TIM0)
 113   2          {
 114   3            TL0 = 0;
C51 COMPILER V9.59.0.0   TIMER                                                             10/16/2018 22:59:29 PAGE 3   

 115   3            TH0 = 0;
 116   3          }
 117   2          else if(TIMx == TIM1)
 118   2          {
 119   3            TL1 = 0;
 120   3            TH1 = 0;
 121   3          }   
 122   2        }
 123   1        
 124   1        //使能定时器
 125   1        TimerCmd(TIMx , enable);
 126   1      }
 127          
 128          sbit ETx = IE^1;
 129          
 130          //定时器溢出中断使能函数
 131          void TimerOverFlowItInit(TimerTypeDef_t TIMx , FunctionalState_t newState)
 132          {
 133   1        //根据输入的定时器编号配置对应IE中断寄存器
 134   1        if(newState == enable)
 135   1        {
 136   2          EA = 1;
 137   2        }
 138   1        ETx = IE^(1 + TIMx * 2);
 139   1        ETx = newState;
 140   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    431    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----      24
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
